#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MEAN2:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

var userNames = {};
var chatRooms;

io.sockets.on('connection', function (client) {
    console.log('Client connected...');

    client.on('addUser', function (parameters) {
        var rooms = parameters.rooms;
        chatRooms = [];
        for (var i = 0; i < rooms.length; i++) {
            chatRooms.push(rooms[i].name);
        }
        var userName = parameters.userName;
        client.username = userName;
        userNames[userName] = userName;
    });

    client.on('chooseRoom', function (parameters) {
        client.leave(client.room);
        var room = parameters.room;
        client.join(room);
        client.room = room;
    });

    client.on('chat message', function (chatMessage) {

        var parameters = {chatMessage: chatMessage, chatRoom: client.room};
        io.emit('send message', parameters);

        //io.in(client.room).emit('send message', parameters);
    });

    client.on('update rooms', function () {
        console.log('update rooms');
        io.emit('get rooms');
    });

    client.on('disconnect', function () {
        delete userNames[client.userName];
        client.leave(client.room);
        client.room = null;
        console.log('user disconnected');
    });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind);
}
